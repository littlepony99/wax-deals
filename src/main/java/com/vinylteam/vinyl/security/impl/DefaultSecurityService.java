package com.vinylteam.vinyl.security.impl;

import com.vinylteam.vinyl.entity.Role;
import com.vinylteam.vinyl.entity.User;
import com.vinylteam.vinyl.exception.entity.UserErrors;
import com.vinylteam.vinyl.security.SecurityConstants;
import com.vinylteam.vinyl.security.SecurityService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.crypto.password.PasswordEncoder;

import javax.crypto.SecretKeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Objects;
import java.util.Random;

@Slf4j
public class DefaultSecurityService implements SecurityService {

    private final Random random = new SecureRandom();
    private final SecretKeyFactory secretKeyFactory;
    private PasswordEncoder encoder;
    private static final String PASSWORD_PATTERN = "^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]{8,}$";
    private static final String EMAIL_PATTERN = "/^[^\\s@]+@[^\\s@]+$/";

    public DefaultSecurityService() {
        log.debug("Started initializer in DefaultSecurityService");
        try {
            secretKeyFactory = SecretKeyFactory.getInstance(SecurityConstants.ENCODE_ALGORITHM);
        } catch (NoSuchAlgorithmException e) {
            log.error("Error during initialisation of secretKeyFactory", e);
            throw new RuntimeException(e);
        }
    }

    public void setEncoder(PasswordEncoder encoder) {
        this.encoder = encoder;
    }

    @Override
    public User createUserWithHashedPassword(String email, char[] password) {
        byte[] salt = generateSalt();
        int iterations = 10000;
        String hashedPassword = hashPassword(password, salt, iterations);
        User user = new User();
        user.setEmail(email);
        user.setPassword(hashedPassword);
        user.setSalt(salt.toString());
        user.setIterations(iterations);
        user.setRole(Role.USER);
        user.setStatus(false);
        log.debug("Resulting user is {'user':{}}", user);
        return user;
    }

    @Override
    public boolean validateIfPasswordMatches(User user, char[] password) {
        boolean isMatched = false;
        if (user != null) {
            isMatched = encoder.matches(new String(password), user.getPassword());
            log.debug("Compared hash of passed password against user's hashed password");
        }
        log.debug("Result of comparing password against user's password is {'isMatched': {}, 'user':{}}", isMatched, user);
        return isMatched;
    }

    @Override
    public void validatePassword(String password, String confirmationPassword) {
        if (!Objects.equals(password, confirmationPassword)) {
            throw new RuntimeException(UserErrors.PASSWORDS_NOT_EQUAL_ERROR.getMessage());
        }
        validatePassword(password);
    }

    @Override
    public void emailFormatCheck(String email) {
        if (!email.matches(EMAIL_PATTERN)) {
            throw new RuntimeException(UserErrors.INVALID_EMAIL_ERROR.getMessage());
        }
    }

    @Override
    public void validatePassword(String password) {
        if (!password.matches(PASSWORD_PATTERN)) {
            throw new RuntimeException(UserErrors.INVALID_PASSWORD_ERROR.getMessage());
        }
    }

    String hashPassword(char[] password, byte[] salt, int iterations) {
        return encoder.encode(new String(password));
    }

    byte[] generateSalt() {
        byte[] salt = new byte[20];
        random.nextBytes(salt);
        log.debug("Generated byte array with salt");
        return salt;
    }

}
